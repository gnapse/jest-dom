// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`.toBeInTheDOM 1`] = `
"expect(element).not.toBeInTheDOM()

Received:
  <span data-testid="count-value" />"
`;

exports[`.toBeInTheDOM 2`] = `
"expect(element).toBeInTheDOM()

Received:
  null"
`;

exports[`.toBeInTheDOM 3`] = `
"expect(received).toBeInTheDOM()

received value must be an HTMLElement.
Received:
  object: {"thisIsNot": "an html element"}"
`;

exports[`.toBeVisible 1`] = `
"expect(element).not.toBeVisible()

Received element is visible:
  <header />"
`;

exports[`.toBeVisible 2`] = `
"expect(element).toBeVisible()

Received element is not visible:
  <p />"
`;

exports[`.toHaveAttribute 1`] = `
"expect(element).not.toHaveAttribute("disabled") // element.hasAttribute("disabled")

Expected the element not to have attribute:
  disabled
Received:
  disabled="""
`;

exports[`.toHaveAttribute 2`] = `
"expect(element).not.toHaveAttribute("type") // element.hasAttribute("type")

Expected the element not to have attribute:
  type
Received:
  type="submit""
`;

exports[`.toHaveAttribute 3`] = `
"expect(element).toHaveAttribute("class") // element.hasAttribute("class")

Expected the element to have attribute:
  class
Received:
  null"
`;

exports[`.toHaveAttribute 4`] = `
"expect(element).not.toHaveAttribute("type", "submit") // element.getAttribute("type") === "submit"

Expected the element not to have attribute:
  type="submit"
Received:
  type="submit""
`;

exports[`.toHaveAttribute 5`] = `
"expect(element).toHaveAttribute("type", "button") // element.getAttribute("type") === "button"

Expected the element to have attribute:
  type="button"
Received:
  type="submit""
`;

exports[`.toHaveAttribute 6`] = `
"expect(received).not.toHaveAttribute()

received value must be an HTMLElement.
Received:
  object: {"thisIsNot": "an html element"}"
`;

exports[`.toHaveClass 1`] = `
"expect(element).not.toHaveClass("btn")

Expected the element not to have class:
  btn
Received:
  btn extra btn-danger"
`;

exports[`.toHaveClass 2`] = `
"expect(element).not.toHaveClass("btn-danger")

Expected the element not to have class:
  btn-danger
Received:
  btn extra btn-danger"
`;

exports[`.toHaveClass 3`] = `
"expect(element).not.toHaveClass("extra")

Expected the element not to have class:
  extra
Received:
  btn extra btn-danger"
`;

exports[`.toHaveClass 4`] = `
"expect(element).toHaveClass("xtra")

Expected the element to have class:
  xtra
Received:
  btn extra btn-danger"
`;

exports[`.toHaveClass 5`] = `
"expect(element).not.toHaveClass("btn btn-danger")

Expected the element not to have class:
  btn btn-danger
Received:
  btn extra btn-danger"
`;

exports[`.toHaveClass 6`] = `
"expect(element).toHaveClass("btn-link")

Expected the element to have class:
  btn-link
Received:
  btn extra btn-danger"
`;

exports[`.toHaveClass 7`] = `
"expect(element).toHaveClass("btn-danger")

Expected the element to have class:
  btn-danger
Received:
"
`;

exports[`.toHaveStyle 1`] = `
"expect(element).toHaveStyle()

- Expected

- font-weight: bold;
  
+ "
`;

exports[`.toHaveStyle 2`] = `
"expect(element).not.toHaveStyle()

Compared values have no visual difference."
`;

exports[`.toHaveStyle 3`] = `"Syntax error parsing expected css: property missing ':' in 1:24"`;

exports[`.toHaveStyle 4`] = `"Syntax error parsing expected css: property missing ':' in 1:18"`;

exports[`.toHaveTextContent 1`] = `
"expect(received).toHaveTextContent()

received value must be an HTMLElement.
Received: null"
`;

exports[`.toHaveTextContent 2`] = `
"expect(element).toHaveTextContent()

Expected element to have text content:
  3
Received:
  2"
`;

exports[`.toHaveTextContent 3`] = `
"expect(element).not.toHaveTextContent()

Expected element not to have text content:
  2
Received:
  2"
`;
